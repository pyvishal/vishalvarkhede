import cv2
import numpy as np
import matplotlib.pyplot as plt

# Function to preprocess the image
def preprocess_image(image):
    # Convert to grayscale
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    
    # Enhance contrast using CLAHE (Contrast Limited Adaptive Histogram Equalization)
    clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8, 8))
    enhanced = clahe.apply(gray)
    
    # Denoise the image
    denoised = cv2.fastNlMeansDenoising(enhanced, None, h=10, templateWindowSize=7, searchWindowSize=21)
    
    return denoised

# Function to detect objects using bounding boxes
def detect_objects(image):
    # Apply Gaussian blur to reduce noise
    blurred = cv2.GaussianBlur(image, (5, 5), 0)
    
    # Perform edge detection
    edges = cv2.Canny(blurred, 50, 150)
    
    # Find contours
    contours, _ = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    
    # Define a minimum area to consider as "big"
    min_area = 1000  # Adjust this value based on your requirements
    
    # List to hold bounding boxes of big objects
    big_objects = []
    
    # Filter contours based on area
    for contour in contours:
        area = cv2.contourArea(contour)
        if area > min_area:
            x, y, w, h = cv2.boundingRect(contour)
            big_objects.append((x, y, w, h))
            # Draw the bounding box (optional for visualization)
            cv2.rectangle(image, (x, y), (x + w, y + h), (0, 255, 0), 2)
    
    return image, big_objects

# Load the image
image = cv2.imread('path_to_your_image.jpg')

# Preprocess the image
processed_image = preprocess_image(image.copy())

# Detect objects using bounding boxes
processed_image, big_objects = detect_objects(processed_image)

# Display the result using matplotlib
plt.figure(figsize=(10, 10))
plt.imshow(cv2.cvtColor(processed_image, cv2.COLOR_BGR2RGB))
plt.title(f'Detected Big Objects: {len(big_objects)}')
plt.axis('off')
plt.show()

print(f'Number of big objects detected: {len(big_objects)}')
