import cv2
import numpy as np
import matplotlib.pyplot as plt

# Function to detect large objects in an image
def detect_large_objects(image_path, min_area=1000):
    # Read the image
    image = cv2.imread(image_path)
    # Convert to grayscale
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    # Apply GaussianBlur to reduce noise and improve contour detection
    blurred = cv2.GaussianBlur(gray, (5, 5), 0)
    # Apply Canny edge detection
    edges = cv2.Canny(blurred, 50, 150)
    # Find contours
    contours, _ = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    
    # Filter contours by area
    large_contours = [contour for contour in contours if cv2.contourArea(contour) > min_area]
    
    # Draw bounding boxes around the large contours
    for contour in large_contours:
        x, y, w, h = cv2.boundingRect(contour)
        cv2.rectangle(image, (x, y), (x + w, y + h), (0, 255, 0), 2)
    
    # Display the image with bounding boxes
    plt.figure(figsize=(10, 10))
    plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
    plt.axis('off')
    plt.show()
    
    # Print the count of detected objects
    print(f'Number of detected large objects: {len(large_contours)}')

# Path to the input image
image_path = 'path_to_your_image.jpg'
detect_large_objects(image_path)
