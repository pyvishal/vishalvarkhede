from pyspark.sql import SparkSession
from pyspark.sql.functions import col, lit
from statsmodels.tsa.arima.model import ARIMA
import pandas as pd

# Initialize SparkSession
spark = SparkSession.builder \
    .appName("EmployeeLeavingForecasting") \
    .getOrCreate()

# Aggregate actual employee counts by OrganizationType and quarters of 2023
actual_df = merged_df.filter((col('DateofLeaving') >= '2023-01-01') & (col('DateofLeaving') <= '2023-12-31')) \
                     .groupBy('OrganizationType', 'Quarterly_Trend_Num').count()

# Create empty dataframe for forecasted counts
forecast_schema = "OrganizationType STRING, Quarterly_Trend_Num STRING, count INT"
forecast_df = spark.createDataFrame([], schema=forecast_schema)

# Forecast for 2024 quarters
for org_type in actual_df.select('OrganizationType').distinct().rdd.flatMap(lambda x: x).collect():
    org_type_df = actual_df.filter(col('OrganizationType') == org_type)
    org_type_df = org_type_df.orderBy('Quarterly_Trend_Num')

    # Convert DataFrame to Pandas for ARIMA model
    pandas_df = org_type_df.toPandas()
    pandas_df.set_index('Quarterly_Trend_Num', inplace=True)

    # Train ARIMA model
    model = ARIMA(pandas_df['count'], order=(1, 0, 0))
    fitted_model = model.fit()

    # Forecast for 2024 quarters and round the values to integers
    forecast = fitted_model.forecast(steps=4).round().astype(int)

    # Create DataFrame for the forecast results
    forecast_values = [(org_type, f'Q{i+1}_2024', forecast[i]) for i in range(4)]
    forecast_org_type_df = spark.createDataFrame(forecast_values, schema=forecast_schema)

    # Union the forecast DataFrame with the overall forecast DataFrame
    forecast_df = forecast_df.union(forecast_org_type_df)

# Union actual and forecasted counts, and include forecasted organization types
combined_df = actual_df.union(forecast_df.withColumn('OrganizationType', col('OrganizationType'))
                                           .withColumn('count', lit(None)))

# Display the combined DataFrame
combined_df.show()

# Stop SparkSession
spark.stop()
