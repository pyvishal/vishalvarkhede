from pyspark.sql import SparkSession
from pyspark.sql.functions import col
from statsmodels.tsa.arima.model import ARIMA
import pandas as pd

# Initialize SparkSession
spark = SparkSession.builder \
    .appName("EmployeeLeavingForecasting") \
    .getOrCreate()

# Aggregate actual employee counts by OrganizationType and quarters of 2023
actual_df = merged_df.filter((col('DateofLeaving') >= '2023-01-01') & (col('DateofLeaving') <= '2023-12-31')) \
                     .groupBy('OrganizationType', 'Quarterly_Trend_Num').count()

# Forecast for 2024 quarters
forecast_results = {}
for org_type in actual_df.select('OrganizationType').distinct().rdd.flatMap(lambda x: x).collect():
    org_type_df = actual_df.filter(col('OrganizationType') == org_type)
    org_type_df = org_type_df.orderBy('Quarterly_Trend_Num')

    # Convert DataFrame to Pandas for ARIMA model
    pandas_df = org_type_df.toPandas()
    pandas_df.set_index('Quarterly_Trend_Num', inplace=True)

    # Train ARIMA model
    model = ARIMA(pandas_df['count'], order=(1, 0, 0))
    fitted_model = model.fit()

    # Forecast for 2024 quarters and round the values to integers
    forecast = fitted_model.forecast(steps=4).round().astype(int)
    forecast_results[org_type] = forecast

# Create a DataFrame for the forecasted counts
forecast_df = pd.DataFrame(forecast_results).T.reset_index()
forecast_df.columns = ['OrganizationType', 'Q1_2024', 'Q2_2024', 'Q3_2024', 'Q4_2024']

# Join actual and forecasted counts, and include forecasted organization types
combined_df = actual_df.union(spark.createDataFrame(forecast_df))

# Display the combined DataFrame
combined_df.show()

# Stop SparkSession
spark.stop()
