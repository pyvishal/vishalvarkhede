from pyspark.sql import SparkSession
from fbprophet import Prophet

# Initialize SparkSession
spark = SparkSession.builder \
    .appName("EmployeeLeavingForecasting") \
    .getOrCreate()

# Aggregate data by OrganizationType and quarters of 2023
aggregated_df = merged_df_spark.groupBy('OrganizationType', 'Quarterly_Trend_Num').count()

# Create an empty DataFrame to hold forecast results
forecast_df = spark.createDataFrame([], schema="OrganizationType STRING, Q1_2024 INT, Q2_2024 INT, Q3_2024 INT, Q4_2024 INT")

# Train Prophet model for each OrganizationType and forecast for 2024 quarters
for org_type in aggregated_df.select('OrganizationType').distinct().rdd.flatMap(lambda x: x).collect():
    org_type_df = aggregated_df.filter(col('OrganizationType') == org_type)
    org_type_df = org_type_df.orderBy('Quarterly_Trend_Num')

    # Convert DataFrame to Pandas for Prophet model
    pandas_df = org_type_df.toPandas()
    pandas_df.rename(columns={'Quarterly_Trend_Num': 'ds', 'count': 'y'}, inplace=True)

    # Train Prophet model
    model = Prophet()
    model.fit(pandas_df)

    # Forecast for 2024 quarters
    future = model.make_future_dataframe(periods=4, freq='Q')
    forecast = model.predict(future)

    # Extract forecasted values for 2024 quarters
    forecast_values = forecast[['ds', 'yhat']][-4:].values.tolist()
    forecast_values = [(org_type,) + tuple([int(round(value)) for value in values[1:]]) for values in forecast_values]

    # Create DataFrame for the forecast results
    forecast_org_type_df = spark.createDataFrame(forecast_values, schema="OrganizationType STRING, Q1_2024 INT, Q2_2024 INT, Q3_2024 INT, Q4_2024 INT")

    # Union the forecast DataFrame with the overall forecast DataFrame
    forecast_df = forecast_df.union(forecast_org_type_df)

# Display forecast DataFrame
forecast_df.display()

# Stop SparkSession
spark.stop()
